wf := import("@platforma-sdk/workflow-tengo:workflow")
exec := import("@platforma-sdk/workflow-tengo:exec")
assets:= import("@platforma-sdk/workflow-tengo:assets")
xsv := import("@platforma-sdk/workflow-tengo:pframes.xsv")
pframes := import("@platforma-sdk/workflow-tengo:pframes")
pSpec := import("@platforma-sdk/workflow-tengo:pframes.spec")
json := import("json")

pfClusterMarkersConv := import(":pf-cluster-markers-conv")
pfDEGConversion := import(":pf-DEG-conv")

wf.prepare(func(args){
	// Validate cluster annotation is provided
	if is_undefined(args.clusterAnnotationRef) {
		error("Cluster annotation is required")
	}

	// Create bundle builder for automatic PColumn discovery
	bundleBuilder := wf.createPBundleBuilder()
	bundleBuilder.ignoreMissingDomains() // Handle various data types
	
	// Add the cluster annotation as the main anchor
	bundleBuilder.addAnchor("clusters", args.clusterAnnotationRef)
	
	// Add query for count matrix - we'll filter this in body based on trace analysis
	bundleBuilder.addMulti({
		name: "pl7.app/rna-seq/countMatrix",
		domain: {
			"pl7.app/rna-seq/normalized": "false"
		}
		// ,
		// annotations: {
		// 	"pl7.app/hideDataFromGraphs": "true"
		// }
	}, "countMatrices")
	
	return {
		columns: bundleBuilder.build()
	}
})

wf.body(func(args) {
	// Extract block ID as string
	blockId := wf.blockId().getDataAsJson()
	
	// Get the resolved cluster annotation
	columns := args.columns
	clusterAnnotation := columns.getColumn(args.clusterAnnotationRef)
	clusterSpec := clusterAnnotation.spec
	
	if is_undefined(clusterSpec.annotations) {
		error("Cluster annotation is missing required metadata.")
	}
	
	clusterTraceAnnotation := clusterSpec.annotations["pl7.app/trace"]
	if is_undefined(clusterTraceAnnotation) {
		error("Cluster annotation is missing trace information.")
	}
	
	clusterTrace := json.decode(clusterTraceAnnotation || "[]")
	
	// Extract Cell Ranger block ID from trace
	cellRangerBlockId := undefined
	for step in clusterTrace {
		if !is_undefined(step) && !is_undefined(step.type) && 
			(step.type == "milaboratories.cell-ranger" || 
				step.type == "milaboratories.import-sc-rnaseq-data") {
			if !is_undefined(step.id) {
				cellRangerBlockId = step.id
				break
			}
		}
	}
	
	if cellRangerBlockId == undefined {
		error("Could not find Cell Ranger step in cluster annotation trace.")
	}
	
	// Find the matching count matrix from the available ones
	allCountMatrices := columns.getColumns("countMatrices")
	rawCounts := undefined
	
	for countMatrix in allCountMatrices {
		if !is_undefined(countMatrix.spec.domain) && 
		   countMatrix.spec.domain["pl7.app/blockId"] == cellRangerBlockId {
			rawCounts = countMatrix
			break
		}
	}
	
	if is_undefined(rawCounts) {
		error("No associated count matrix found.")
	}

	inputSpec := rawCounts.spec
	species := inputSpec.domain["pl7.app/species"]
	topN := args.topN
	strictOverlap := args.strictOverlap
	
	// Assign default values if cleared by user
	logfcCutoff := args.logfcCutoff
	if is_undefined(logfcCutoff) {
		logfcCutoff = 1.0
	}
	
	pvalCutoff := args.pvalCutoff
	if is_undefined(pvalCutoff) {
		pvalCutoff = 0.01
	}

	clusterColumn := clusterAnnotation.spec.annotations["pl7.app/label"]

	// Set default conversion memory and CPU
	defaultConvMem := "16GiB" // @TODO: set based on the size of the input
	defaultConvCpu := 1       // @TODO: set based on the size of the input
	
	csvClusters := xsv.exportFrame([clusterAnnotation], "csv", { mem: defaultConvMem, cpu: defaultConvCpu })
	csvCounts := xsv.exportFrame([rawCounts], "csv", { mem: defaultConvMem, cpu: defaultConvCpu })

	clusterMarkers := exec.builder().
		software(assets.importSoftware("@platforma-open/milaboratories.cluster-markers.software:calculate-clusterMarkers")).
		mem("32GiB").
		cpu(1).
		addFile("rawCounts.csv", csvCounts).
		addFile("clusters.csv", csvClusters).
		arg("--counts").arg("rawCounts.csv").
		arg("--clusters").arg("clusters.csv").
		arg("--cluster_column").arg(string(clusterColumn)).
		arg("--top_n").arg(string(topN)).
		arg("--logfc_cutoff").arg(string(logfcCutoff)).
		arg("--pval_cutoff").arg(string(pvalCutoff))

	if strictOverlap {
		clusterMarkers = clusterMarkers.arg("--so")
	}

	clusterMarkers = clusterMarkers.
		// arg("--species").arg(string(species)).
		saveFile("cluster_markers.csv").
		saveFile("top_markers.csv").
		saveFile("DEG.csv").
		printErrStreamToStdout().
		saveStdoutContent().
		cache(24 * 60 * 60 * 1000).
		run()

	clusterMarkersImportParams := pfClusterMarkersConv.getColumns(blockId, species)
	clusterMarkersPf := xsv.importFile(clusterMarkers.getFile("cluster_markers.csv"), "csv", clusterMarkersImportParams, { mem: defaultConvMem, cpu: defaultConvCpu })
	clusterMarkersTopPf := xsv.importFile(clusterMarkers.getFile("top_markers.csv"), "csv", clusterMarkersImportParams, { mem: defaultConvMem, cpu: defaultConvCpu })

	// Construct degPF for export for functional analysis
	DEGImportParams := pfDEGConversion.getColumns(blockId, species)
	DEGPf := xsv.importFile(clusterMarkers.getFile("DEG.csv"), "csv", DEGImportParams, { mem: defaultConvMem, cpu: defaultConvCpu })

	// Create informative label with relevant cluster markers parameters
	logfcStr := string(logfcCutoff)
	pvalStr := string(pvalCutoff)
	specificityMode := strictOverlap ? "Strict overlap" : "Non-exclusive"
	
	traceLabel := "Cluster Markers (" + specificityMode + ", logfc:" + logfcStr + ", pval:" + pvalStr + ")"
	
	trace := pSpec.makeTrace(inputSpec, { type: "milaboratories.cluster-markers", importance: 60, label: traceLabel })

	exports := {
        DEG: {
            spec: trace.inject(DEGPf["log2foldchange.spec"]),
            data: DEGPf["log2foldchange.data"]
        },
        regDir: {
            spec: trace.inject(DEGPf["regulationDirection.spec"]),
            data: DEGPf["regulationDirection.data"]
        }
    }

	return {
		outputs: {
			clusterMarkersPf: pframes.exportFrame(clusterMarkersPf),
			clusterMarkersTopPf: pframes.exportFrame(clusterMarkersTopPf)
		},
		exports: exports
	}
})

