wf := import("@platforma-sdk/workflow-tengo:workflow")
exec := import("@platforma-sdk/workflow-tengo:exec")
assets:= import("@platforma-sdk/workflow-tengo:assets")
xsv := import("@platforma-sdk/workflow-tengo:pframes.xsv")
pframes := import("@platforma-sdk/workflow-tengo:pframes")

pfClusterMarkersConv := import(":pf-cluster-markers-conv")

wf.prepare(func(args){
	return {
		resolvedInput: wf.resolve(args.countsRef, { errIfMissing: true }),
		resolvedClusterAnnotation: wf.resolve(args.clusterAnnotationRef, { errIfMissing: true })
	}
})

wf.body(func(args) {

	blockId := wf.blockId().getDataAsJson()
	rawCounts := args.resolvedInput
	inputSpec := rawCounts.spec
	species := inputSpec.domain["pl7.app/species"]
	topN := args.topN

	clusterAnnotation := args.resolvedClusterAnnotation
	clusterColumn := clusterAnnotation.spec.annotations["pl7.app/label"]
	
	csvClusters := xsv.exportFrame([clusterAnnotation], "csv", {})

	csvCounts := xsv.exportFrame([rawCounts], "csv", {})

	clusterMarkers := exec.builder().
		software(assets.importSoftware("@platforma-open/milaboratories.cluster-markers.software:calculate-clusterMarkers")).
		addFile("rawCounts.csv", csvCounts).
		addFile("clusters.csv", csvClusters).
		arg("--counts").arg("rawCounts.csv").
		arg("--clusters").arg("clusters.csv").
		arg("--cluster_column").arg(string(clusterColumn)).
		arg("--top_n").arg(string(topN)).
		// arg("--species").arg(string(species)).
		saveFile("cluster_markers.csv").
		saveFile("top_markers.csv").
		printErrStreamToStdout().
		saveStdoutContent().
		cache(24 * 60 * 60 * 1000).
		run()

	clusterMarkersImportParams := pfClusterMarkersConv.getColumns(blockId, species)
	clusterMarkersPf := xsv.importFile(clusterMarkers.getFile("cluster_markers.csv"), "csv", clusterMarkersImportParams)
	clusterMarkersTopPf := xsv.importFile(clusterMarkers.getFile("top_markers.csv"), "csv", clusterMarkersImportParams)


	return {
		outputs: {
			clusterMarkersPf: pframes.exportFrame(clusterMarkersPf),
			clusterMarkersTopPf: pframes.exportFrame(clusterMarkersTopPf)
		},
		exports: {}
	}
})

